
"""
Django settings for LibraryProject project - SECURE CONFIGURATION

Generated by 'django-admin startproject' using Django 5.2.4.

This settings file implements comprehensive security measures following Django security best practices.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Secret key kept secret used in production!
# In production, this should be loaded from environment variables
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-vei!lhn%e2$e0*ybq3pap$42*0y6pcu%c@*$5wbz#+v_$y#hg&')

# DEBUG is set to False in production to prevent information disclosure
# This prevents detailed error pages from being shown to users
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() in ('true', '1', 'yes')

# Allowed hosts to prevent Host header attacks
# In production, replace with your actual domain names
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',
    'relationship_app',
    # Content Security Policy middleware
    'csp',  # Add this if using django-csp package
]

#SECURE MIDDLEWARE CONFIGURATION
# Security middleware should be at the top for maximum protection
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    
    # Content Security Policy middleware (if using django-csp)
    'csp.middleware.CSPMiddleware',
    
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    
    # CSRF protection middleware - prevents CSRF attacks
    'django.middleware.csrf.CsrfViewMiddleware',
    
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    
    # Clickjacking protection - prevents clickjacking attacks
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation - Enhanced security for user passwords
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,  # SECURITY: Increased minimum password length
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # For production static file serving

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model Configuration
AUTH_USER_MODEL = 'bookshelf.CustomUser'

# Authentication settings
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Message framework settings
MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'error',
}

# COMPREHENSIVE SECURITY SETTINGS

# SECURITY: Browser-side XSS protection
# Enables browser's built-in XSS filtering
SECURE_BROWSER_XSS_FILTER = True

# SECURITY: Clickjacking protection
# Prevents the site from being embedded in frames (clickjacking attacks)
X_FRAME_OPTIONS = 'DENY'  # or 'SAMEORIGIN' if you need to embed your own pages

# SECURITY: MIME-type sniffing protection  
# Prevents browsers from MIME-sniffing content types
SECURE_CONTENT_TYPE_NOSNIFF = True

# SECURITY: HTTPS-only cookies (CRITICAL for production)
# Ensures cookies are only sent over HTTPS connections
CSRF_COOKIE_SECURE = not DEBUG  # True in production
SESSION_COOKIE_SECURE = not DEBUG  # True in production

# SECURITY: Additional cookie security settings
CSRF_COOKIE_HTTPONLY = True  # Prevents JavaScript access to CSRF cookie
SESSION_COOKIE_HTTPONLY = True  # Prevents JavaScript access to session cookie
SESSION_COOKIE_AGE = 3600  # Session timeout in seconds (1 hour)

# SECURITY: HSTS (HTTP Strict Transport Security) settings
# Forces HTTPS for all future requests
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0  # 1 year in production
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# SECURITY: SSL/TLS redirect settings
SECURE_SSL_REDIRECT = not DEBUG  # Redirect HTTP to HTTPS in production

# SECURITY: Referrer policy - controls referrer information sent with requests
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# SECURITY: Additional security headers
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'

# STEP 4: CONTENT SECURITY POLICY (CSP)

# CSP settings to prevent XSS attacks by controlling resource loading
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'")  # Be cautious with 'unsafe-inline'
CSP_STYLE_SRC = ("'self'", "'unsafe-inline'", "https://cdn.jsdelivr.net")
CSP_IMG_SRC = ("'self'", "data:", "https:")
CSP_FONT_SRC = ("'self'", "https://fonts.gstatic.com")
CSP_CONNECT_SRC = ("'self'",)
CSP_FRAME_ANCESTORS = ("'none'",)  # Prevents embedding in frames
CSP_BASE_URI = ("'self'",)
CSP_FORM_ACTION = ("'self'",)

# CSP reporting (optional - for monitoring CSP violations)
# CSP_REPORT_URI = '/csp-report-endpoint/'

# LOGGING CONFIGURATION FOR SECURITY

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django.security': {
            'handlers': ['file', 'console'],
            'level': 'WARNING',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(BASE_DIR / 'logs', exist_ok=True)


# DEVELOPMENT VS PRODUCTION NOTES

"""
IMPORTANT PRODUCTION CHECKLIST:
1. Set DEBUG = False
2. Use environment variables for SECRET_KEY
3. Configure proper ALLOWED_HOSTS
4. Enable HTTPS and set SECURE_SSL_REDIRECT = True
5. Set all *_SECURE cookie settings to True
6. Configure proper CSP policies
7. Set up proper logging and monitoring
8. Regular security updates and dependency scanning
9. Use a proper database (PostgreSQL/MySQL) instead of SQLite
10. Configure static file serving through a web server (nginx/Apache)
"""